//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database.Controller.Chill
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MoviesEntities : DbContext
    {
        public MoviesEntities()
            : base("name=MoviesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblActor> tblActors { get; set; }
        public virtual DbSet<tblAudio> tblAudios { get; set; }
        public virtual DbSet<tblCodec> tblCodecs { get; set; }
        public virtual DbSet<tblComposer> tblComposers { get; set; }
        public virtual DbSet<tblDirector> tblDirectors { get; set; }
        public virtual DbSet<tblEpisode> tblEpisodes { get; set; }
        public virtual DbSet<tblEpisodeMediaAudio> tblEpisodeMediaAudios { get; set; }
        public virtual DbSet<tblEpisodeMediaCodec> tblEpisodeMediaCodecs { get; set; }
        public virtual DbSet<tblEpisodeMediaReleaseType> tblEpisodeMediaReleaseTypes { get; set; }
        public virtual DbSet<tblEpisodeMediaResolution> tblEpisodeMediaResolutions { get; set; }
        public virtual DbSet<tblEpisodeMediaSpecial> tblEpisodeMediaSpecials { get; set; }
        public virtual DbSet<tblGenre> tblGenres { get; set; }
        public virtual DbSet<tblMedia> tblMedias { get; set; }
        public virtual DbSet<tblMovie> tblMovies { get; set; }
        public virtual DbSet<tblMusic> tblMusics { get; set; }
        public virtual DbSet<tblNetwork> tblNetworks { get; set; }
        public virtual DbSet<tblParentalRating> tblParentalRatings { get; set; }
        public virtual DbSet<tblPerson> tblPersons { get; set; }
        public virtual DbSet<tblProducer> tblProducers { get; set; }
        public virtual DbSet<tblReleaseType> tblReleaseTypes { get; set; }
        public virtual DbSet<tblResolution> tblResolutions { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblSpecial> tblSpecials { get; set; }
        public virtual DbSet<tblStudio> tblStudios { get; set; }
        public virtual DbSet<tblTVSery> tblTVSeries { get; set; }
        public virtual DbSet<tblTVSeriesMediaAudio> tblTVSeriesMediaAudios { get; set; }
        public virtual DbSet<tblTVSeriesMediaCodec> tblTVSeriesMediaCodecs { get; set; }
        public virtual DbSet<tblTVSeriesMediaReleaseType> tblTVSeriesMediaReleaseTypes { get; set; }
        public virtual DbSet<tblTVSeriesMediaResolution> tblTVSeriesMediaResolutions { get; set; }
        public virtual DbSet<tblTVSeriesMediaSpecial> tblTVSeriesMediaSpecials { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<qryActor> qryActors { get; set; }
        public virtual DbSet<qryAudio> qryAudios { get; set; }
        public virtual DbSet<qryCodec> qryCodecs { get; set; }
        public virtual DbSet<qryDirector> qryDirectors { get; set; }
        public virtual DbSet<qryGenre> qryGenres { get; set; }
        public virtual DbSet<qryMedia> qryMedias { get; set; }
        public virtual DbSet<qryParentalRating> qryParentalRatings { get; set; }
        public virtual DbSet<qryReleaseType> qryReleaseTypes { get; set; }
        public virtual DbSet<qryResolution> qryResolutions { get; set; }
        public virtual DbSet<qrySpecial> qrySpecials { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
